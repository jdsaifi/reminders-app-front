{"version":3,"sources":["redux/reducers/auth.reducer.js","redux/reducers/user.reducer.js","redux/reducers/reminders.reducer.js","redux/reducers/index.js","redux/store.js","utils/utils.js","components/header/menu.component.jsx","components/not-found/not-found.component.jsx","utils/APIHelper.js","redux/actions/auth.action.js","components/login/login.component.jsx","components/login/logout.component.jsx","redux/actions/users.action.js","components/profile/is-friend.component.jsx","components/profile/profile-card.component.jsx","components/profile/profile.component.jsx","components/profile/user-profile.component.jsx","components/reminders/reminder-card.component.jsx","components/home/home-page.component.jsx","redux/actions/reminders.action.js","components/reminders/set-reminder.component.jsx","components/search/user-search-card.component.jsx","components/search/users-search.component.jsx","components/frends/requests.components.jsx","components/profile/update-profile.component.jsx","components/profile/change-username.component.jsx","components/reminders/expired-reminders.component.jsx","App.js","serviceWorker.js","index.js"],"names":["_state","isAuthorized","user","profile","users","userSearchMeta","friends","list","combineReducers","auth","state","type","payload","reminders","middleware","thunk","logger","store","createStore","reducers","applyMiddleware","partsOfDate","partsOfTime","TIME_SHIFTS","start","end","fixed","isAccessToken","token","sessionStorage","getItem","BASE_URL","parts","partsOfTheDay","shift","hour","Date","getHours","filter","val","indx","validateDateTime","date","time","inputDate","inputTime","fixedTimeing24H","includes","moment","format","add","currentHour","plusOneHourInCurrentHour","hourForPart","isSame","arr","split","targetDate","h","m","status","isBefore","inputs","converted","HeaderMenu","props","onChange","e","setState","target","name","value","searchHandler","a","preventDefault","history","push","search","this","Navbar","bg","variant","expand","Container","Toggle","aria-controls","Collapse","id","Nav","className","Link","href","Form","inline","FormControl","placeholder","Button","onClick","React","Component","withRouter","connect","NotFound","axios","create","baseURL","responseType","actionAuthorize","dispatch","accessToken","API","get","headers","data","Login","signin","res","provider","email","username","auth_provider","auth_provider_id","auth_provider_access_token","display_name","dp","first_name","last_name","timezone","tz","guess","_","isEmpty","profileObj","googleId","imageUrl","givenName","familyName","loginErrorMsg","msg","closeErrorAlert","Alert","key","onClose","dismissible","appId","fields","callback","cssClass","clientId","buttonText","onSuccess","onFailure","post","socialLoginResponse","setItem","access_token","c","response","api_status","actionSocialSignIn","authorize","Logout","removeItem","actionMe","IsFriend","sendFriendRequest","isRequesting","sendRequest","userId","code","isRequested","isFriend","apiMsg","self","Dropdown","Item","disabled","to","actionSendFriendRequest","ProfileCard","isOwner","requests_in_count","can_friend_set_reminder","isBlocked","handleBlock","Card","Menu","owner","Body","alt","src","pathname","Profile","meProfile","RequestButtons","actionAccept","actionReject","reqAccepting","reqRejecting","UserProfile","dismisRequestButtons","didUpdate","errorMsg","proccessBlock","proccessUnblock","closeError","prevProps","prevState","usersProfile","params","match","resUserProfile","hasRequest","actionUser","ReminderCard","remind_me","friend","remind_me_on","friendName","hasOwnProperty","style","width","minHeight","HomePage","changeReminderPage","page","loadReminders","reminders_meta","meta","current_page","has_next","items_count","pages_count","map","reminder","_id","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","itemClass","innerClass","linkClass","actionReminders","SetReminder","saveReminder","setReminder","setReminderData","showSuccessAlert","showErrorAlert","closeSuccessAlert","dateDropdownHandler","dateDisplay","isObject","valid","showPastDateError","timeDropdownHandler","timeDisplay","qs","queryString","parse","location","validDate","f","loadFriends","Header","Control","Group","controlId","as","Label","selected","part","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","dateFormat","Footer","reminder_data","UserSearchCard","UserSearch","changeUserSearchPage","searchUser","query","search_users_meta","thisMatch","prevMatch","q","loadSelf","actionSearchUser","FriendRequests","requests","req_in","friend_requests_in","length","UpdateProfile","checked","saveProfile","closeAlert","Check","label","ChangeUsername","Error","message","ExpiredReminders","actionExpiredReminders","App","exact","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02d65985.chunk.js","sourcesContent":["\r\nconst _state = {\r\n    isAuthorized: false,\r\n    user: {}\r\n};\r\n\r\nexport default (state = _state, { type, payload }) => {\r\n    switch(type){\r\n        case 'auth':\r\n            return {...state, ...payload}\r\n        case 'me':\r\n            return {...state, user: {...payload} }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","\r\nconst _state = {\r\n    profile: {},\r\n    users: [],\r\n    userSearchMeta: {},\r\n    friends: []\r\n};\r\n\r\nexport default (state = _state, { type, payload }) => {\r\n    switch(type){\r\n        case 'user_profile':\r\n            return {...state, profile: { ...payload } }\r\n        case 'search_user':\r\n            return {...state, ...payload}\r\n        case 'loadFriends':\r\n            return {...state, friends: [...payload] }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nconst _state = {\r\n    list: []\r\n};\r\n\r\nexport default (state = _state, { type, payload }) => {\r\n    switch(type){\r\n        case 'load_reminders':\r\n            return {...state, list: [ ...payload ] }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport authReducer from './auth.reducer';\r\nimport userReducer from './user.reducer';\r\nimport remindersReducer from './reminders.reducer';\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    users: userReducer,\r\n    reminders: remindersReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport reducers from './reducers';\r\n\r\nconst middleware = [thunk, logger];\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;","import moment from 'moment';\r\n\r\nconst partsOfDate = ['Today', 'Tomorrow'];\r\nconst partsOfTime = ['Morning', 'Afternoon', 'Evening', 'Night'];\r\nconst TIME_SHIFTS = {\r\n    'morning':      {start: 5,  end: 11, fixed: 9},\r\n    'afternoon':    {start: 12, end: 16, fixed: 12},\r\n    'evening':      {start: 17, end: 20, fixed: 17},\r\n    'night':        {start: 21, end: 4,  fixed: 21},\r\n};\r\n\r\nexport const TIME_PICKER_TIME_INTERVALS = 15;\r\n\r\nexport const isAccessToken = () => {\r\n    const token = sessionStorage.getItem('reminderapp::access_token');\r\n\r\n    if(token === null){\r\n        return false;\r\n    }else{\r\n        return token\r\n    }\r\n}\r\n\r\nexport const BASE_URL = '/';\r\nexport const parts = partsOfTime;\r\n\r\nexport const partsOfTheDay = () => {\r\n    /*\r\n        morning: 9 am\r\n        afternoon: 12 pm\r\n        evening: 5 pm\r\n        night: 9 pm\r\n    */\r\n    const parts = partsOfTime; //['Morning', 'Afternoon', 'Evening', 'Night'];\r\n    const hour  = new Date().getHours();\r\n    let shift;\r\n    if(hour >= 5  && hour <= 11) shift = 0 // Morning;\r\n    if(hour >= 12 && hour <= 16) shift = 1 // Afternoon;\r\n    if(hour >= 17 && hour <= 20) shift = 2 // Evening;\r\n    if(hour >= 21 || hour <= 4) shift = 3 // Night;\r\n\r\n    return parts.filter( (val, indx) => indx>=shift );\r\n}\r\n\r\nexport const validateDateTime = (date, time) => {    \r\n    let inputDate = date;\r\n    let inputTime = time;\r\n    let fixedTimeing24H = {};\r\n\r\n    if(partsOfDate.includes(date)){\r\n        switch(date){\r\n            case 'Today':\r\n                date = moment().format('YYYY-MM-DD');\r\n                break;\r\n            case 'Tomorrow':\r\n                date = moment().add(1, 'd').format('YYYY-MM-DD');\r\n        }\r\n    }\r\n\r\n    if(partsOfTime.includes(time)){\r\n        const currentHour  = new Date().getHours();\r\n        let plusOneHourInCurrentHour = currentHour + 1;\r\n    \r\n        let hourForPart = null;\r\n        switch(time){\r\n            case 'Morning':\r\n                    hourForPart = TIME_SHIFTS.morning.fixed;\r\n                    if( (\r\n                        currentHour >= TIME_SHIFTS.morning.start &&\r\n                        currentHour <= TIME_SHIFTS.morning.end\r\n                    ) && (\r\n                        plusOneHourInCurrentHour >= TIME_SHIFTS.morning.start &&\r\n                        plusOneHourInCurrentHour <= TIME_SHIFTS.morning.end\r\n                    ) && moment().isSame(date, 'd') ){\r\n                        hourForPart = plusOneHourInCurrentHour\r\n                    }\r\n                    fixedTimeing24H = {'h': hourForPart, 'm': '00'};\r\n                break;\r\n            case 'Afternoon':\r\n                    hourForPart = TIME_SHIFTS.afternoon.fixed;\r\n                    if( (\r\n                        currentHour >= TIME_SHIFTS.afternoon.start &&\r\n                        currentHour <= TIME_SHIFTS.afternoon.end\r\n                    ) && (\r\n                        plusOneHourInCurrentHour >= TIME_SHIFTS.afternoon.start &&\r\n                        plusOneHourInCurrentHour <= TIME_SHIFTS.afternoon.end\r\n                    ) && moment().isSame(date, 'd') ){\r\n                        hourForPart = plusOneHourInCurrentHour\r\n                    }\r\n                    fixedTimeing24H = {'h': hourForPart, 'm': '00'};\r\n                break;\r\n            case 'Evening':\r\n                    hourForPart = TIME_SHIFTS.evening.fixed;\r\n                    if( (\r\n                        currentHour >= TIME_SHIFTS.evening.start &&\r\n                        currentHour <= TIME_SHIFTS.evening.end\r\n                    ) && (\r\n                        plusOneHourInCurrentHour >= TIME_SHIFTS.evening.start &&\r\n                        plusOneHourInCurrentHour <= TIME_SHIFTS.evening.end\r\n                    ) && moment().isSame(date, 'd') ){\r\n                        hourForPart = plusOneHourInCurrentHour\r\n                    }\r\n                    fixedTimeing24H = {'h': hourForPart, 'm': '00'};\r\n                break;\r\n    \r\n            case 'Night':\r\n                    hourForPart = TIME_SHIFTS.night.fixed;               \r\n                    if( (\r\n                        currentHour >= TIME_SHIFTS.night.start &&\r\n                        currentHour <= TIME_SHIFTS.night.end\r\n                    ) && (\r\n                        plusOneHourInCurrentHour >= TIME_SHIFTS.night.start &&\r\n                        plusOneHourInCurrentHour <= TIME_SHIFTS.night.end\r\n                    ) && moment().isSame(date, 'd') ){\r\n                        hourForPart = plusOneHourInCurrentHour\r\n                    }\r\n                    \r\n                    fixedTimeing24H = {'h': hourForPart, 'm': '00'};\r\n                break;\r\n        }\r\n    }else{\r\n        let arr = time.split(':');\r\n        fixedTimeing24H = {'h': arr[0] || 0, 'm': arr[1] || 0};\r\n    }\r\n\r\n    let targetDate = moment(date)\r\n    .add(fixedTimeing24H.h, 'h')\r\n    .add(fixedTimeing24H.m, 'm')\r\n\r\n    return {\r\n        status: moment().isBefore(targetDate),\r\n        inputs: {\r\n            date: inputDate, time: inputTime\r\n        },\r\n        converted: {\r\n            date, time: `${fixedTimeing24H.h}:${fixedTimeing24H.m}`\r\n        }\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router\";\r\n\r\n// Bootstrap\r\nimport Container from 'react-bootstrap/Container';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport { BASE_URL } from '../../utils/utils';\r\n\r\nclass HeaderMenu extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            search: ''\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    searchHandler = async (e) => {        \r\n        e.preventDefault();\r\n        const { history } = this.props;\r\n        history.push(`${BASE_URL}search/${this.state.search}`);\r\n    }\r\n\r\n    render(){\r\n        const { isAuthorized } = this.props;\r\n        const { search } = this.state;\r\n        return (\r\n            <Navbar bg=\"info\" variant=\"dark\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href={`${BASE_URL}`} className=\"nav-link\">HOME</Nav.Link>\r\n                            <Nav.Link href={`${BASE_URL}me`} className=\"nav-link\">PROFILE</Nav.Link>\r\n                            <Nav.Link href={`${BASE_URL}set-reminder`} className=\"nav-link\">SET REMINDER</Nav.Link>\r\n                            <Nav.Link href={`${BASE_URL}past-reminders`} className=\"nav-link\">PAST REMINDERS</Nav.Link>\r\n                        </Nav>\r\n\r\n                        {\r\n                            isAuthorized === false ? '' \r\n                            : \r\n                            <Form inline>\r\n                                <FormControl type=\"text\" placeholder=\"Search\" \r\n                                className=\"mr-sm-2\" name=\"search\" value={search} onChange={this.onChange} />\r\n                                <Button type=\"submit\" variant=\"outline-light\" onClick={this.searchHandler}>Search</Button>\r\n                            </Form>\r\n                        }\r\n\r\n                        <Nav>\r\n                            { \r\n                                isAuthorized === false ? \r\n                                <Nav.Link href={`${BASE_URL}login`} className=\"nav-link\">LOGIN</Nav.Link>\r\n                                :<Nav.Link href={`${BASE_URL}logout`} className=\"nav-link\">LOGOUT</Nav.Link>\r\n                            }\r\n                        </Nav>\r\n\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuthorized: state.auth.isAuthorized,\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(HeaderMenu));","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"text-center col-md mt-5\">\r\n            <h1 className=\"display-3\">404</h1>\r\n            <h5>Page not found.</h5>\r\n        </div>\r\n      </div>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://okreminder.com:3001/api/v1\",\r\n  //baseURL: \"https://reminders-app-backend.herokuapp.com/api/v1\",\r\n  responseType: \"json\"\r\n});","import API from '../../utils/APIHelper';\r\n\r\nexport const actionSocialSignIn = data => {\r\n    return async dispatch => {\r\n        try{\r\n            const socialLoginResponse = await API.post(`/social-signin`, data);\r\n            if(socialLoginResponse.status === 201){\r\n                const { data: { data } } = socialLoginResponse;\r\n\r\n                // Save JWT Access Token\r\n                sessionStorage.setItem('reminderapp::access_token', data.access_token);\r\n                \r\n                dispatch({\r\n                    type: 'auth',\r\n                    payload: {...data, isAuthorized: true}\r\n                });\r\n\r\n                return { c: 10001, status: true, msg: 'Success' }\r\n            }else{\r\n                return { c: 10002, status: false, msg: 'Something went wrong.' }\r\n            }\r\n            \r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                switch(status){\r\n                    case 422:\r\n                        return { c: 10003, status: false, api_status: 422, msg: data.msg, data: data.data }\r\n                    case 409:\r\n                        return { c: 10004, status: false, api_status: 409, msg: data.msg, data: data.data }\r\n                    default:\r\n                        return { c: 10005, status: false, api_status: 500, msg: data.msg, data: data.data }\r\n                }                \r\n            }else{\r\n                // something is wrong\r\n                return { c: 10006, status: false, api_status: 500, msg: 'Something went wrong.' }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const actionAuthorize = () => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { data } = await API.get('/authorize', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            if(data.status === 'okay'){\r\n                dispatch({\r\n                    type: 'auth',\r\n                    payload: { isAuthorized: true }\r\n                });\r\n                return true;\r\n            }else{\r\n                dispatch({\r\n                    type: 'auth',\r\n                    payload: { isAuthorized: false }\r\n                });\r\n                return false;\r\n            }\r\n        }catch(error){\r\n            return false;\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport GoogleLogin from 'react-google-login';\r\nimport _ from 'lodash';\r\nimport moment from 'moment-timezone';\r\n\r\n// Bootstrap\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { actionSocialSignIn, actionAuthorize } from '../../redux/actions/auth.action';\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            loginErrorMsg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history } = this.props;\r\n\r\n        // Is access_token exists\r\n        if(isAccessToken()){\r\n            history.push(`${BASE_URL}`);\r\n        }\r\n        \r\n    }\r\n\r\n    signin = async (res, provider) => {\r\n        let data;\r\n        if(provider === 'facebook' && res.email){\r\n            let username = res.email.split('@')[0];\r\n            data = {\r\n                auth_provider: 'facebook',\r\n                auth_provider_id: res.id,\r\n                auth_provider_access_token: res.accessToken,\r\n                username: username,\r\n                email: res.email,\r\n                display_name: res.name,\r\n                dp: `https://graph.facebook.com/${res.id}/picture?type=large`,\r\n                first_name: res.first_name || \"\",\r\n                last_name: res.last_name || \"\",\r\n                timezone: moment.tz.guess()\r\n            }\r\n        }\r\n\r\n        if(provider === 'google' && !_.isEmpty(res.profileObj)){\r\n            let username = res.profileObj.email.split('@')[0];\r\n            data = {\r\n                auth_provider: 'google',\r\n                auth_provider_id: res.profileObj.googleId,\r\n                auth_provider_access_token: res.accessToken,\r\n                username: username,\r\n                email: res.profileObj.email,\r\n                display_name: res.profileObj.name,\r\n                dp: res.profileObj.imageUrl,\r\n                first_name: res.profileObj.givenName || \"\",\r\n                last_name: res.profileObj.familyName || \"\",\r\n                timezone: moment.tz.guess()\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if(data){\r\n            const res = await this.props.signin(data);\r\n            if(res.status === false){\r\n                this.setState({ loginErrorMsg: res.msg });\r\n            }\r\n\r\n            if(res.status === true){\r\n                this.setState({ loginErrorMsg: '' });\r\n                const { history } = this.props;\r\n                // Redirect user to Profile(/me) page\r\n                history.push(`${BASE_URL}me`);\r\n            }\r\n        }else{\r\n            this.setState({ loginErrorMsg: 'Something went wrong. Please try later.' });\r\n        }\r\n    }\r\n\r\n    closeErrorAlert = () => {\r\n        this.setState({ loginErrorMsg: '' });\r\n    }\r\n\r\n    render(){\r\n        const { loginErrorMsg } = this.state;\r\n\r\n        return(\r\n            <section className=\"container\">\r\n                <h2 className=\"text-center\">Welcome to Remind.me</h2>\r\n                <hr />\r\n\r\n                {\r\n                    loginErrorMsg !== '' ? \r\n                    <Alert key={1} variant='danger' onClose={() => this.closeErrorAlert()} dismissible>\r\n                        <strong>Error! </strong>{loginErrorMsg}\r\n                    </Alert>\r\n                    : ''\r\n                }\r\n\r\n                <article className=\"jumbotron\">\r\n                    <p className=\"text-center lead\">\r\n                        <strong>\r\n                            Ready to begin? Signin to set reminder and collaborate with your friends and colleagues!\r\n                        </strong>\r\n                    </p>\r\n\r\n                    <div className=\"text-center\">\r\n                        <FacebookLogin\r\n                            appId=\"860969304305165\" //APP ID NOT CREATED YET\r\n                            fields=\"name,email,picture,first_name,last_name\"\r\n                            callback={res => this.signin(res, 'facebook')}\r\n                            cssClass=\"loginBtn loginBtn--facebook mr-4\"\r\n                        />\r\n\r\n                        <GoogleLogin\r\n                                clientId=\"604433154038-357srq78dgd0jiji0fs7s8rme0k5uu0u.apps.googleusercontent.com\" //CLIENTID NOT CREATED YET\r\n                                buttonText=\"LOGIN WITH GOOGLE\"\r\n                                onSuccess={res => this.signin(res, 'google')}\r\n                                onFailure={res => this.signin(res, 'google')}\r\n                            />\r\n                    </div>\r\n                </article>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signin: data => dispatch(actionSocialSignIn(data)),\r\n        authorize: () => dispatch(actionAuthorize())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\n\r\nclass Logout extends React.Component{\r\n    async componentDidMount(){\r\n        const { history } = this.props;\r\n\r\n        if(!isAccessToken()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        // Remove access token\r\n        sessionStorage.removeItem('reminderapp::access_token');\r\n        return history.push(`${BASE_URL}login`);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                See you soon...\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Logout;","import API from '../../utils/APIHelper';\r\n\r\nexport const actionMe = () => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { data: { status, data } } = await API.get('/users/me', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 'okay'){\r\n                dispatch({\r\n                    type: 'me',\r\n                    payload: data\r\n                });\r\n                return {status: true, msg:'Profile'}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                return { status: false, msg: data.msg, data: data.data }\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const actionUser = username => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.get(`/users/${username}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            \r\n            if(status === 200 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'user_profile',\r\n                    payload: data\r\n                });\r\n\r\n                return {status: true, msg:`${username}'s Profile`}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                if(status === 404 ){\r\n                    return { status: false, api_status: 404, msg: data.msg, data: data.data }\r\n                }\r\n                return { status: false, api_status: 500, msg:'Something went wrong.', data: data.data }\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const actionSearchUser = (q, page) => {\r\n    return async dispatch => {\r\n        try{            \r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data, meta } } = await API.get(`/search?q=${q}&page=${page}&limit=24`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            \r\n            if(status === 200 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'search_user',\r\n                    payload: {\r\n                        users: data,\r\n                        userSearchMeta: meta\r\n                    }\r\n                });\r\n\r\n                return {status: true, msg:`Search result`, meta}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                if(status === 404 ){\r\n                    return { status: false, api_status: 404, msg: data.msg, data: data.data }\r\n                }\r\n                \r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const actionSendFriendRequest = (to) => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, msg, code } } = await API.post(`/friends/request`, {\r\n                to\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                // request sent\r\n                return {status: true, code: 'requested'}\r\n            }\r\n\r\n            if(status === 200){\r\n                if(code === 'already_friends') return {status: true, code: 'friends'}\r\n                if(code === 'already_requested') return {status: true, code: 'requested'}\r\n            }\r\n\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                switch(status){\r\n                    case 422:\r\n                        return {status: false, api_status: 422, msg: data.msg, data: data.data }                    \r\n                    default:\r\n                        return {status: false, api_status: 500, msg: data.msg, data: data.data }\r\n                }                \r\n            }else{\r\n                // something is wrong\r\n                return { status: false, api_status: 500, msg: 'Something went wrong.' }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const actionLoadFriends = () => {\r\n    return async dispatch => {\r\n        try{            \r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.get(`/friends`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            \r\n            if(status === 200 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'loadFriends',\r\n                    payload: data\r\n                });\r\n\r\n                return {status: true, msg:`Friends`}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                return {status: false, msg: data.msg}\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n// Bootstrap\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport { actionSendFriendRequest } from '../../redux/actions/users.action';\r\n\r\nclass IsFriend extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            isFriend: props.isFriend,\r\n            isRequested: props.isRequested,\r\n            isRequesting: false,\r\n            userId: props.userId,\r\n            self: props.self,\r\n            apiMsg: ''\r\n        };\r\n        \r\n    }\r\n\r\n    sendFriendRequest = async e => {\r\n        e.preventDefault();\r\n\r\n        this.setState({ isRequesting: true });\r\n\r\n        const res = await this.props.sendRequest(this.props.userId);\r\n\r\n        if(res.status === true){\r\n            if(res.code === \"requested\"){\r\n                this.setState({ isRequesting: false, isRequested: true });\r\n            }\r\n            if(res.code === \"friends\"){\r\n                this.setState({ isRequesting: false, isFriend: true });\r\n            }\r\n        }else{\r\n            this.setState({ \r\n                isRequesting: false, \r\n                isFriend: false, \r\n                isRequested: false, \r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isFriend, isRequested, isRequesting, self } = this.state;\r\n\r\n        let status = '';\r\n        if(isFriend === true) status = <Dropdown.Item disabled>Both are friends</Dropdown.Item>;\r\n        if(isRequested === true) status = <Dropdown.Item disabled>Requested</Dropdown.Item>;\r\n\r\n        if(isFriend === false && isRequested === false)\r\n            status = <Dropdown.Item onClick={this.sendFriendRequest}>Send friend request</Dropdown.Item>            \r\n\r\n        if(isRequesting === true) \r\n            status = <Dropdown.Item disabled>Requesting...</Dropdown.Item>;\r\n\r\n        if(self === true)\r\n            status = \"\";\r\n\r\n        return (\r\n            <div className=\"text-left mb-0 text-muted\">\r\n                {status}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        sendRequest: to => dispatch(actionSendFriendRequest(to))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(IsFriend);","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Bootstrap\r\nimport Card from 'react-bootstrap/Card';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport IsFriend from './is-friend.component';\r\nimport { BASE_URL } from '../../utils/utils';\r\n\r\n// alt-src=\"https://avatars.dicebear.com/v2/avataaars/xxd.svg\"\r\nexport const ProfileCard = ({ \r\n    id, dp, display_name, email, isOwner, isFriend, isRequested, self, requests_in_count, \r\n    can_friend_set_reminder, isBlocked, handleBlock\r\n}) => (\r\n    <Card className=\"mx-auto mt-0 p-2 w-50\">\r\n        \r\n\r\n        { \r\n            isOwner && requests_in_count > 0\r\n            ? <div className=\"text-left mb-0\">\r\n                Requests: <a href=\"/requests\">{requests_in_count} View</a>\r\n            </div> \r\n            : null \r\n        }\r\n\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"link\" className=\"more-menu pull-right\">\r\n                <i className=\"fa fa-ellipsis-h\"></i>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n                {\r\n                    self ?\r\n                    <Dropdown.Item disabled>Self Profile</Dropdown.Item>\r\n                    : null\r\n                }\r\n                { \r\n                    isOwner ? null \r\n                    : <IsFriend userId={id} self={self} owner={isOwner} isFriend={isFriend} isRequested={isRequested} />\r\n                }\r\n\r\n                {\r\n                    isOwner === false && isBlocked === false && self === false ?\r\n                    // <button className=\"btn btn-sm pull-right btn-info\" onClick={handleBlock}>Block this user</button>\r\n                    <Dropdown.Item onClick={handleBlock}>Block this User</Dropdown.Item>\r\n                    : null\r\n                }\r\n                {\r\n                    isOwner === false && isBlocked === true ?\r\n                    // <button className=\"btn btn-sm pull-right btn-info\" onClick={handleBlock}>Unblock this user</button>\r\n                    <Dropdown.Item onClick={handleBlock}>Unblock this User</Dropdown.Item>\r\n                    : null\r\n                }\r\n\r\n                {/* { isOwner === false ? <Dropdown.Item href={`${BASE_URL}me/edit`}>Block this User</Dropdown.Item> : null } */}\r\n                { isOwner ? <Dropdown.Item href={`${BASE_URL}me/edit`}>Update Profile</Dropdown.Item> : null }\r\n                { isOwner ? <Dropdown.Item href={`${BASE_URL}me/change-username`}>Change username</Dropdown.Item> : null }\r\n\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n        \r\n        <Card.Body className=\"text-center\">\r\n            <img \r\n                alt=\"Profile\" \r\n                src={dp}\r\n                className=\"rounded-circle img-thumbnail mx-auto text-center\"\r\n                />\r\n\r\n            <p className=\"lead mb-0\">{display_name}</p>\r\n            <p className=\"text-muted\">{email}</p>\r\n\r\n            {\r\n                isOwner === false && isFriend === true && can_friend_set_reminder === true\r\n                ? <Link \r\n                    to={{\r\n                        pathname: `${BASE_URL}set-reminder`,\r\n                        search: `?f=${id}`\r\n                    }}\r\n                    className=\"btn btn-info btn-block\"\r\n                >\r\n                    <i className=\"fa fa-bell\"></i> Send Reminder\r\n                </Link>\r\n                : null\r\n            }\r\n            \r\n        </Card.Body>\r\n    </Card>\r\n)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\n\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionMe } from '../../redux/actions/users.action';\r\n\r\n/** Import Component */\r\nimport { ProfileCard } from './profile-card.component';\r\n\r\nclass Profile extends React.Component {\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, meProfile } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        if(await authorize()){\r\n            await meProfile();\r\n        }else{\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        if(_.isEmpty(user)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n        return (\r\n            <section className=\"container\">\r\n                <div className=\"row mt-5 br1\">\r\n                    <article className=\"col-md text-cetner\">\r\n                        <ProfileCard {...user} isOwner={true} />\r\n                    </article>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        meProfile: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionUser } from '../../redux/actions/users.action';\r\nimport API from '../../utils/APIHelper';\r\n\r\n/** Import Component */\r\nimport { ProfileCard } from './profile-card.component';\r\n\r\nfunction RequestButtons({ username, actionAccept, actionReject, reqAccepting, reqRejecting}){\r\n    return (\r\n        <div className=\"row mt-5\">\r\n            <div className=\"col-md\">\r\n                <Alert key=\"1\" variant='info'>\r\n                    <strong>Action required </strong>\r\n                    You have a pending friend request from @{username}\r\n                    {' '}  \r\n\r\n                    {\r\n                        reqAccepting || reqRejecting ?\r\n                        <button className=\"btn btn-success\" disabled>{reqAccepting?'Acepting...':'Accept'}</button> : \r\n                        <button className=\"btn btn-success\" onClick={actionAccept}>Accept</button> \r\n                    }\r\n                    \r\n                    {' '} \r\n\r\n                    {\r\n                        reqRejecting || reqAccepting ?\r\n                        <button className=\"btn btn-danger\" disabled>{reqRejecting?'Rejecting...':'Reject'}</button> :\r\n                        <button className=\"btn btn-danger\" onClick={actionReject}>Reject</button>\r\n                    }\r\n                </Alert>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass UserProfile extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            apiMsg: '',\r\n            errorMsg: '',\r\n            reqAccepting: false,\r\n            reqRejecting: false,\r\n            dismisRequestButtons: false,\r\n            didUpdate: false,\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState){\r\n        const { history, authorize, usersProfile, match: { params } } = this.props;\r\n\r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n        \r\n        if(this.state.didUpdate !== prevState.didUpdate){\r\n            await usersProfile(params.username || \"\");\r\n            this.setState({ didUpdate: false });\r\n        }\r\n        \r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, usersProfile, match: { params } } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        if(await authorize()){\r\n            const resUserProfile = await usersProfile(params.username || \"\");\r\n            if(!resUserProfile.status){\r\n                this.setState({\r\n                    apiMsg: resUserProfile.msg\r\n                });\r\n            }\r\n        }else{\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n    }\r\n\r\n    actionAccept = async () => {\r\n        const { user: { username } } = this.props;\r\n        \r\n        this.setState({\r\n            reqAccepting: true\r\n        });\r\n\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/friends/requests/${username}/accept`, null, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({\r\n                    reqAccepting: false,\r\n                    dismisRequestButtons: true,\r\n                    didUpdate: true,\r\n                    errorMsg: 'The friend request has been accepted.'\r\n                });\r\n            }\r\n        }catch(error){\r\n\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                this.setState({\r\n                    reqAccepting: false,\r\n                    errorMsg: data.msg\r\n                });     \r\n            }else{\r\n                // something is wrong\r\n                this.setState({\r\n                    reqAccepting: false,\r\n                    errorMsg: 'Something went wrong.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    actionReject = async () => {\r\n        \r\n        const { user: { username } } = this.props;\r\n        this.setState({\r\n            reqRejecting: true\r\n        });\r\n\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/friends/requests/${username}/reject`, null, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({\r\n                    reqRejecting: false,\r\n                    dismisRequestButtons: true,\r\n                    didUpdate: true,\r\n                    errorMsg: 'The friend request has been rejected.'\r\n                });\r\n            }\r\n        }catch(error){\r\n\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                this.setState({\r\n                    reqRejecting: false,\r\n                    errorMsg: data.msg\r\n                });     \r\n            }else{\r\n                // something is wrong\r\n                this.setState({\r\n                    reqRejecting: false,\r\n                    errorMsg: 'Something went wrong.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    proccessBlock = async () => {\r\n        const { user: { username } } = this.props;\r\n\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/users/${username}/block`, null, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({\r\n                    errorMsg: 'User has been blocked',\r\n                    didUpdate: true\r\n                });\r\n            }\r\n        }catch(error){\r\n\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                this.setState({\r\n                    errorMsg: data.msg\r\n                });     \r\n            }else{\r\n                // something is wrong\r\n                this.setState({\r\n                    errorMsg: 'Something went wrong.'\r\n                });\r\n                \r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    proccessUnblock = async () => {\r\n        const { user: { username } } = this.props;\r\n        \r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/users/${username}/unblock`, null, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({\r\n                    errorMsg: 'User has been unblocked',\r\n                    didUpdate: true\r\n                });\r\n            }\r\n        }catch(error){\r\n\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                this.setState({\r\n                    errorMsg: data.msg\r\n                });     \r\n            }else{\r\n                // something is wrong\r\n                this.setState({\r\n                    errorMsg: 'Something went wrong.'\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBlock = () => {\r\n        const isBlocked = this.props.user.isBlocked;\r\n        \r\n        if(isBlocked === true){\r\n            // process unblock\r\n            this.proccessUnblock();\r\n        }\r\n\r\n        if(isBlocked === false){\r\n            // process block\r\n            this.proccessBlock()\r\n        }\r\n    }\r\n\r\n    closeError = () =>{\r\n        this.setState({\r\n            errorMsg: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const { apiMsg, reqAccepting, reqRejecting, errorMsg, dismisRequestButtons } = this.state;\r\n\r\n        if(apiMsg !== '') return (<h3 className=\"text-center lead mt-4\">{apiMsg}</h3>);\r\n\r\n        if(_.isEmpty(user)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);        \r\n\r\n        return (\r\n            <section className=\"container\">\r\n                {user.hasRequest && dismisRequestButtons === false ? <RequestButtons \r\n                    username={user.username} \r\n                    actionAccept={this.actionAccept}\r\n                    actionReject={this.actionReject}\r\n                    reqAccepting={reqAccepting}\r\n                    reqRejecting={reqRejecting}\r\n                />:null}\r\n\r\n                {errorMsg === '' ? null : <div className=\"row\">\r\n                    <div className=\"col-md\">\r\n                        <Alert key=\"2\" variant='info' onClose={() => this.closeError()} dismissible>\r\n                            <strong>Alert! </strong>{errorMsg}</Alert>\r\n                    </div>\r\n                </div>}\r\n\r\n                <div className=\"row mt-5\">\r\n                    <article className=\"col-md text-cetner\">\r\n                        <ProfileCard {...user} isOwner={false} handleBlock={this.handleBlock} />\r\n                    </article>                    \r\n                </div>\r\n            </section>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.users.profile\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        usersProfile: username => dispatch(actionUser(username))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfile);","import React from 'react';\r\nimport moment from 'moment-timezone'; \r\n\r\n// Bootstrap\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nclass ReminderCard extends React.Component {\r\n    render(){\r\n        const { time, date, remind_me, owner: { display_name, dp }, friend } = this.props;\r\n        let remind_me_on = moment(`${date} ${time}`);\r\n\r\n        let friendName = '';\r\n        if(friend && friend.hasOwnProperty('display_name'))\r\n            friendName = friend.display_name;\r\n\r\n        return (\r\n            <section className=\"row mt-3\">\r\n                <article className=\"col-md\">\r\n                    <Card className=\"mt-0 p-3 reminder-card-boxshadow\">\r\n                        <div className=\"row\">\r\n                            <article className=\"col-md-2 text-center reminder-list-user-box\">\r\n                                {/* https://avatars.dicebear.com/v2/avataaars/xxd.svg */}\r\n                                <img src={dp} alt=\"Avatar\"\r\n                                style={{ width: \"75px\" }} />\r\n                                <p className=\"lead\">{display_name}</p>\r\n                            </article>\r\n\r\n                            <article className=\"col-md-10\">\r\n                                <p className=\"lead\"  style={{ minHeight:\"70px\" }}>{remind_me}</p>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md\">\r\n                                        <strong className=\"text-muted\">Will remind at </strong>\r\n                                        { remind_me_on.format('LLLL') }\r\n                                    </div>\r\n                                    <div className=\"col-md\">\r\n                                        <strong className=\"text-muted\">Reminder for: </strong>\r\n                                        <i>{display_name}</i> <i>{friendName!== ''? `& ${friendName}`: ''}</i>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                            </article>\r\n                        </div>\r\n                    </Card>\r\n                </article>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReminderCard;","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionReminders } from '../../redux/actions/reminders.action';\r\nimport { actionMe } from '../../redux/actions/users.action';\r\n\r\n// Components\r\nimport ReminderCard from '../reminders/reminder-card.component';\r\n\r\nclass HomePage extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n       \r\n        this.state = {\r\n            reminders_meta: {\r\n                current_page: 1,\r\n                has_next: null,\r\n                items_count: 0,\r\n                pages_count: 0\r\n            },\r\n            apiMsg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, loadReminders, meProfile } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            return history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        // load self profile\r\n        await meProfile();\r\n\r\n        // load reminders\r\n        const res = await loadReminders(this.state.reminders_meta.current_page);\r\n        if(res.status === true){\r\n            \r\n            this.setState({\r\n                reminders_meta: res.meta\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    changeReminderPage = async page => { \r\n        const { loadReminders } = this.props;       \r\n        // load reminders\r\n        const res = await loadReminders(page);\r\n\r\n        if(res.status === true){\r\n            this.setState({\r\n                reminders_meta: res.meta\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { reminders, user: { timezone } } = this.props;\r\n        const { apiMsg, reminders_meta: { current_page, items_count } } = this.state;\r\n        \r\n        if(apiMsg !== '') return (<h3 className=\"text-center lead mt-4\">{apiMsg}</h3>);\r\n\r\n        if(_.isEmpty(reminders)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n        \r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    reminders.map( reminder => {\r\n                        return <ReminderCard \r\n                        key={reminder._id} \r\n                        timezone={timezone}\r\n                        {...reminder}\r\n\r\n                        />\r\n                    })\r\n                }\r\n                <Pagination\r\n                    activePage={current_page}\r\n                    itemsCountPerPage={10}\r\n                    totalItemsCount={items_count}\r\n                    pageRangeDisplayed={7}\r\n                    onChange={this.changeReminderPage}\r\n                    itemClass=\"page-item\"\r\n                    innerClass=\"pagination mt-5 mb-5\"\r\n                    linkClass=\"page-link\"\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reminders: state.reminders.list,\r\n    user: state.auth.user\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        loadReminders: page => dispatch(actionReminders(page)),\r\n        meProfile: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","import API from '../../utils/APIHelper';\r\n\r\n/** all reminders */\r\nexport const actionReminders = page => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data, meta } } = await API.get(`/reminders?page=${page}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            \r\n            if(status === 200 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'load_reminders',\r\n                    payload: data\r\n                });\r\n\r\n                return {status: true, msg:`List of reminders`, meta}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                if(status === 404 ){\r\n                    return { status: false, api_status: 404, msg: data.msg, data: data.data }\r\n                }\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n// End Reminders\r\n\r\n/** \r\n * Load all expired reminders\r\n */\r\nexport const actionExpiredReminders = page => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data, meta } } = await API.get(`/expired-reminders?page=${page}`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n            \r\n            if(status === 200 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'load_reminders',\r\n                    payload: data\r\n                });\r\n\r\n                return {status: true, msg:`List of reminders`, meta}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { status, data } = response;\r\n                if(status === 404 ){\r\n                    return { status: false, api_status: 404, msg: data.msg, data: data.data }\r\n                }\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n // End actionExpiredReminders();\r\n\r\n/**\r\n * Set Reminder\r\n */\r\nexport const actionSetReminder = reminder_data => {\r\n    return async dispatch => {\r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status } } = await API.post(`/reminders`, reminder_data, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201 && api_status === 'okay'){\r\n                dispatch({\r\n                    type: 'set_new_reminder_success'\r\n                });\r\n\r\n                return {status: true, msg:`Reminder has been set successfully.`}\r\n            }else{\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            if(response){\r\n                const { data } = response;\r\n                return { status: false, api_status: data.status, msg: data.msg, data: data.data }\r\n            }else{\r\n                // something is wrong\r\n                return {status: false, msg:'Something went wrong.'}\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\n\r\n// Bootstrap\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\n\r\nimport { isAccessToken, BASE_URL, partsOfTheDay, parts, validateDateTime, TIME_PICKER_TIME_INTERVALS } from '../../utils/utils';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionSetReminder } from '../../redux/actions/reminders.action';\r\nimport { actionLoadFriends } from '../../redux/actions/users.action';\r\nimport queryString from 'query-string';\r\n\r\nclass SetReminder extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const qs = queryString.parse(props.location.search);\r\n\r\n        const validDate = validateDateTime(moment().format('YYYY-MM-DD'), parts[0]);\r\n        \r\n        this.state = {\r\n            showErrorAlert: false,\r\n            showSuccessAlert: false,\r\n            msg: '',\r\n\r\n            // form data\r\n            remind_me: '',\r\n            date: validDate.converted.date,\r\n            dateDisplay: 'Today',\r\n            time: validDate.converted.time,\r\n            timeDisplay: partsOfTheDay()[1] || 'Night', //validDate.inputs.time,\r\n            partsOfTheDay: parts,\r\n            showPastDateError: false,\r\n            friend: 'f' in qs ? qs.f : ''\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, loadFriends } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n        await loadFriends();\r\n    }\r\n\r\n    saveReminder = async () => {\r\n        const { setReminder } = this.props;\r\n        const { remind_me, date, time, friend } = this.state;\r\n        \r\n        let setReminderData = {remind_me, date, time, friend};\r\n\r\n        const res = await setReminder(setReminderData);\r\n\r\n        if(res.status === true){\r\n            this.setState({\r\n                showSuccessAlert: true,\r\n                msg: res.msg\r\n            });\r\n        }else{\r\n            this.setState({\r\n                showErrorAlert: true,\r\n                msg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    closeSuccessAlert = () => {\r\n        this.setState({\r\n            showSuccessAlert: false\r\n        });\r\n    }\r\n\r\n    closeErrorAlert = () => {\r\n        this.setState({\r\n            showErrorAlert: false\r\n        });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        /*\r\n          Because we named the inputs to match their\r\n          corresponding values in state, it's\r\n          super easy to update the state\r\n        */\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    dateDropdownHandler = (val) => {        \r\n        let date = null;\r\n        let dateDisplay = val;\r\n        if(_.isObject(dateDisplay)){\r\n            date = moment(val);\r\n            if(date.format('YYYY') == moment().format('YYYY')){                \r\n                dateDisplay = date.format('dddd, MMMM DD');\r\n            }else{\r\n                dateDisplay = date.format('dddd, MMMM DD, YYYY');\r\n            }\r\n        }else{\r\n            date = moment();\r\n            if(dateDisplay === 'Tomorrow'){\r\n                date.add(1, 'd');\r\n            }\r\n        }\r\n        date = date.format('YYYY-MM-DD');\r\n        \r\n        this.setState({ date, dateDisplay }, () => {\r\n            const { date, time } = this.state;\r\n            const valid = validateDateTime(date, time);\r\n            this.setState({showPastDateError: !valid.status});\r\n        });\r\n    }\r\n\r\n    timeDropdownHandler = (val) => {\r\n        let time = val;\r\n        let timeDisplay = val;\r\n        if(_.isObject(time)){\r\n            time = moment(val).format(\"HH:mm\");\r\n            timeDisplay = moment(val).format(\"hh:mm A\");\r\n        }\r\n        this.setState({ time, timeDisplay }, () => {\r\n            const { date, time } = this.state;\r\n            const valid = validateDateTime(date, time);\r\n            this.setState({showPastDateError: !valid.status, time: valid.converted.time});\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { \r\n            showErrorAlert, \r\n            showSuccessAlert, \r\n            remind_me, \r\n            partsOfTheDay, \r\n            dateDisplay, \r\n            timeDisplay, \r\n            showPastDateError,\r\n            friend\r\n        } = this.state;\r\n\r\n        const { friends } = this.props;\r\n\r\n        return (\r\n            <Container className=\"mt-5\">\r\n                {\r\n                    showSuccessAlert ? \r\n                    <Alert key={1} variant='success' onClose={() => this.closeSuccessAlert()} dismissible>\r\n                        <strong>Success! </strong>{this.state.msg}\r\n                    </Alert>\r\n                    : ''\r\n                }\r\n\r\n                {\r\n                    showErrorAlert ? \r\n                    <Alert key={1} variant='danger' onClose={() => this.closeErrorAlert()} dismissible>\r\n                        <strong>Error! </strong>{this.state.msg}\r\n                    </Alert>\r\n                    : ''\r\n                }\r\n\r\n                <Form>\r\n                    <Card className=\"mx-auto w-50\">\r\n                    <Card.Header>Set a reminder</Card.Header>\r\n                    <Card.Body>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md\">\r\n                                <Form.Control type=\"text\" placeholder=\"Remind me...\" name=\"remind_me\" value={remind_me} onChange={this.onChange} className=\"align-text-bottom\" />\r\n                            </div>\r\n\r\n                            <div className=\"col-md\">\r\n                            <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                <Form.Control as=\"select\" value={friend} name=\"friend\" onChange={this.onChange} >\r\n                                    <option value=\"\">Friends</option>\r\n                                    {\r\n                                        friends.map(friend => <option key={friend._id} value={friend._id}>\r\n                                            {friend.display_name}\r\n                                        </option>)\r\n                                    }\r\n                                    \r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <hr />\r\n\r\n\r\n\r\n                        <section className=\"row\">\r\n                            <div className=\"col-md\">\r\n\r\n                                <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                    <Form.Label>Date</Form.Label>\r\n                                    <Dropdown className=\"w-100 \">\r\n                                        <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\" className=\"w-100 text-left\">\r\n                                                {dateDisplay}\r\n                                        </Dropdown.Toggle>\r\n\r\n                                        <Dropdown.Menu className=\"w-100\">\r\n                                            <Dropdown.Item onClick={()=>this.dateDropdownHandler('Today')}>Today</Dropdown.Item>\r\n                                            <Dropdown.Item onClick={()=>this.dateDropdownHandler('Tomorrow')}>Tomorrow</Dropdown.Item>\r\n                                            <Dropdown.Item className=\"hover-dropdown\">\r\n                                                Set date\r\n                                            </Dropdown.Item>\r\n                                            <div className=\"hover-cal\">\r\n                                                <DatePicker inline\r\n                                                    selected={new Date()}\r\n                                                    onChange={(date) => this.dateDropdownHandler(date)}\r\n                                                />\r\n                                            </div>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </Form.Group>\r\n                            </div>\r\n                            <div className=\"col-md\">\r\n                                <Form.Group controlId=\"exampleForm.ControlSelect1\">\r\n                                    <Form.Label>Time</Form.Label>\r\n                                    <Dropdown className=\"w-100 \">\r\n                                        <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\" className=\"w-100 text-left\">\r\n                                                {timeDisplay}\r\n                                        </Dropdown.Toggle>\r\n\r\n                                        <Dropdown.Menu className=\"w-100\">\r\n                                            {\r\n                                                partsOfTheDay.map(\r\n                                                    part => <Dropdown.Item key={part} onClick={\r\n                                                        ()=>this.timeDropdownHandler(part)\r\n                                                    }>{part}</Dropdown.Item>)\r\n                                            }\r\n\r\n                                            <Dropdown.Item className=\"hover-dropdown\">\r\n                                                Set time\r\n                                            </Dropdown.Item>\r\n\r\n                                            <div className=\"hover-cal\">\r\n                                                \r\n                                            <DatePicker inline\r\n                                                selected={new Date()}\r\n                                                onChange={date => this.timeDropdownHandler(date)}\r\n                                                showTimeSelect\r\n                                                showTimeSelectOnly\r\n                                                timeIntervals={TIME_PICKER_TIME_INTERVALS}\r\n                                                timeCaption=\"Time\"\r\n                                                dateFormat=\"h:mm aa\"\r\n                                            />\r\n                                            </div>\r\n                                        </Dropdown.Menu>\r\n                                    </Dropdown>\r\n                                </Form.Group>\r\n                            </div>\r\n                        </section>\r\n\r\n                    </Card.Body>\r\n                    <Card.Footer className=\"text-muted\">\r\n                        <div className=\"row\">\r\n                            <div className='col-md'>\r\n                                <Button \r\n                                    variant=\"outline-dark\" \r\n                                    onClick={this.saveReminder}\r\n                                    disabled={ remind_me === '' || showPastDateError === true ? `disabled` : null}\r\n                                >Save Reminder</Button>\r\n                            </div>\r\n                            <div className='col-md error-msg text-right'>\r\n                                {\r\n                                    showPastDateError === true ? \r\n                                    <span>\r\n                                        <i className=\"fa fa-exclamation-triangle\"></i> \r\n                                        You can not reminder for past\r\n                                    </span>\r\n                                    : null\r\n                                }\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </Card.Footer>\r\n                    </Card>\r\n                </Form>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    friends: state.users.friends\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        setReminder: data => dispatch(actionSetReminder(data)),\r\n        loadFriends: () => dispatch(actionLoadFriends())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SetReminder);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Bootstrap\r\nimport Card from 'react-bootstrap/Card'\r\nimport { BASE_URL } from '../../utils/utils';\r\n\r\n// alt-src=\"https://avatars.dicebear.com/v2/avataaars/xxd.svg\"\r\nexport const UserSearchCard = ({ dp, display_name, email, username, isOwner }) => (\r\n    <section className=\"col-sm-12 col-md-4 col-lg-4\">\r\n        <Card style={{}} className=\"mx-auto mb-4 p-1\">\r\n            <Card.Body className=\"text-center\">\r\n                <img \r\n                    alt=\"Profile\" \r\n                    src={dp}\r\n                    className=\"rounded-circle img-thumbnail w-75 mx-auto text-center h-75\" />\r\n\r\n                <p className=\"lead mb-0\">{display_name}</p>\r\n                <p className=\"text-muted\">{email}</p>\r\n\r\n                <Link to={`${BASE_URL}users/${username}`}>View Profile</Link>\r\n            </Card.Body>\r\n        </Card>\r\n    </section>\r\n)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Pagination from \"react-js-pagination\";\r\nimport _ from 'lodash';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionMe, actionSearchUser } from '../../redux/actions/users.action';\r\nimport { UserSearchCard } from '../search/user-search-card.component';\r\n\r\n\r\n\r\nclass UserSearch extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            search_users_meta: {\r\n                current_page: 1,\r\n                has_next: null,\r\n                items_count: 0,\r\n                pages_count: 0,\r\n                query: ''\r\n            },\r\n            apiMsg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        const { history, authorize, match: thisMatch , searchUser } = this.props;\r\n        const { match: prevMatch } = prevProps;\r\n        const { current_page } = this.state;        \r\n\r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n        \r\n        if (prevMatch.params.q !== thisMatch.params.q) {\r\n            const res = await searchUser(thisMatch.params.q || '', current_page || 1);\r\n            if(res.status === true){\r\n                this.setState({\r\n                    search_users_meta: res.meta,\r\n                    apiMsg: ''\r\n                });\r\n            }\r\n            if(res.api_status === 404){\r\n                this.setState({\r\n                    apiMsg: res.msg\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, match: { params }, loadSelf, searchUser } = this.props;\r\n        const { current_page } = this.state;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        // load self profile\r\n        await loadSelf();\r\n        \r\n        const res = await searchUser(params.q || '', current_page);\r\n\r\n        if(res.status === true){\r\n            this.setState({\r\n                search_users_meta: res.meta,\r\n                apiMsg: ''\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    changeUserSearchPage = async page => { \r\n        const { searchUser } = this.props;       \r\n        const { search_users_meta: { query } } = this.state;       \r\n        // load reminders\r\n        const res = await searchUser(query, page);\r\n\r\n        if(res.status === true){\r\n            this.setState({\r\n                search_users_meta: res.meta,\r\n                apiMsg: ''\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { users } = this.props;\r\n        const { apiMsg, search_users_meta: { current_page, items_count, pages_count }, search_users_meta } = this.state;\r\n\r\n        if(apiMsg !== '') return (<h3 className=\"text-center lead mt-4\">{apiMsg}</h3>);\r\n        \r\n        if(_.isEmpty(users)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 lead mt-4 mb-4\">\r\n                        Searching for: <strong>{search_users_meta.query}</strong>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    {users.map(user => {\r\n                        return <UserSearchCard key={user._id} {...user} />\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    {\r\n                        pages_count > 1 \r\n                        ? <Pagination\r\n                            activePage={current_page}\r\n                            itemsCountPerPage={10}\r\n                            totalItemsCount={items_count}\r\n                            pageRangeDisplayed={7}\r\n                            onChange={this.changeUserSearchPage}\r\n                            itemClass=\"page-item\"\r\n                            innerClass=\"pagination mt-5 mb-5\"\r\n                            linkClass=\"page-link\"\r\n                        /> : null\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users: state.users.users,\r\n    user: state.auth.user,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        searchUser: (q, page) => dispatch(actionSearchUser(q, page)),\r\n        loadSelf: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSearch)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { UserSearchCard } from '../search/user-search-card.component';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport API from '../../utils/APIHelper';\r\n\r\nclass FriendRequests extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            apiMsg: '',\r\n            requests: []\r\n        };\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize } = this.props;\r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n        \r\n        const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n        const { status, data: { status: api_status, data } } = await API.get(`/friends/requests`, {\r\n            headers: {\r\n                'Authorization': `Bearer ${accessToken}`\r\n            }\r\n        });\r\n\r\n        if(status === 200){\r\n            const req_in = data[0].friend_requests_in;\r\n            this.setState({\r\n                requests: data[0].friend_requests_in,\r\n                apiMsg: req_in.length < 1?'No Data Found.':''\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { requests, apiMsg } = this.state;\r\n\r\n        if(apiMsg !== '') return (<h3 className=\"text-center lead mt-4\">{apiMsg}</h3>);\r\n\r\n        if(_.isEmpty(requests)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 lead mt-4 mb-4\">\r\n                        Friend requests\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    {requests.map(user => {\r\n                        return <UserSearchCard key={user._id} {...user} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize())\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FriendRequests)","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport API from '../../utils/APIHelper';\r\n\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionMe } from '../../redux/actions/users.action';\r\n\r\n// bootstrap\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nclass UpdateProfile extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            can_friend_set_reminder: false,\r\n            display_name: '',\r\n            msg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, meProfile } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        if(await authorize()){\r\n            await meProfile();\r\n            const { user } = this.props;\r\n            this.setState({\r\n                display_name: user.display_name,\r\n                can_friend_set_reminder: user.can_friend_set_reminder\r\n            });\r\n\r\n        }else{\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n    }\r\n\r\n    onChange = (e) => {\r\n        /*\r\n          Because we named the inputs to match their\r\n          corresponding values in state, it's\r\n          super easy to update the state\r\n        */\r\n       \r\n        if(e.target.type === 'checkbox'){\r\n            this.setState({ [e.target.name]: e.target.checked });\r\n        }else{\r\n            this.setState({ [e.target.name]: e.target.value });\r\n        }\r\n        \r\n    }\r\n\r\n    saveProfile = async () => {\r\n        const { display_name, can_friend_set_reminder } = this.state;\r\n        \r\n        try{\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/profile`, {\r\n                display_name, can_friend_set_reminder\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({                    \r\n                    msg: 'Profile update success.'\r\n                });\r\n            }\r\n        }catch(error){\r\n            this.setState({                    \r\n                msg: 'Something went wrong.'\r\n            });\r\n        }\r\n    }\r\n\r\n    closeAlert = () => {\r\n        this.setState({                    \r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const { display_name, can_friend_set_reminder } = this.state;\r\n\r\n        if(_.isEmpty(user)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    this.state.msg !== '' ? \r\n                    <Alert key={1} variant='info' onClose={() => this.closeAlert()} dismissible>\r\n                        <strong>Alert! </strong>{this.state.msg}\r\n                    </Alert>\r\n                    : ''\r\n                }\r\n                <div className=\"row mt-5 br1\">\r\n                    <div className=\"col-md\">\r\n                    <Form >\r\n                        <Card className='mx-auto w-50'>\r\n                            <Card.Header>Profile</Card.Header>\r\n                            <Card.Body>                            \r\n                                <Form.Group controlId=\"display_name\">\r\n                                    <Form.Label>Display Name</Form.Label>\r\n                                    <Form.Control \r\n                                        name=\"display_name\"\r\n                                        type=\"text\" \r\n                                        placeholder=\"Enter display name\" \r\n                                        value={display_name}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group controlId=\"can_friend_set_reminder\">\r\n                                    <Form.Check \r\n                                        type=\"switch\"\r\n                                        id=\"can_friend_set_reminder\"\r\n                                        name=\"can_friend_set_reminder\"\r\n                                        label=\"Can friend set reminder for you\"\r\n                                        onChange={this.onChange}\r\n                                        checked={can_friend_set_reminder}\r\n                                    />\r\n                                </Form.Group>\r\n                                \r\n                            </Card.Body>\r\n\r\n                            <Card.Footer>\r\n                            <Button variant=\"outline-dark\" onClick={this.saveProfile}>\r\n                                    Save Profile\r\n                                </Button>\r\n                            </Card.Footer>\r\n\r\n                        </Card>\r\n                    </Form>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        meProfile: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProfile);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash';\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport API from '../../utils/APIHelper';\r\n\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionMe } from '../../redux/actions/users.action';\r\n\r\n// bootstrap\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nclass ChangeUsername extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: '',\r\n            msg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, meProfile } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken()){\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        if(await authorize()){\r\n            await meProfile();\r\n            const { user } = this.props;\r\n            this.setState({\r\n                username: user.username\r\n            });\r\n\r\n        }else{\r\n            history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n    }\r\n\r\n    onChange = (e) => {\r\n        /*\r\n          Because we named the inputs to match their\r\n          corresponding values in state, it's\r\n          super easy to update the state\r\n        */\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    saveProfile = async () => {\r\n        const { username } = this.state;\r\n        const { user } = this.props;\r\n\r\n        \r\n        \r\n        try{\r\n            if(username === user.username) throw new Error('same_name');\r\n            const accessToken = sessionStorage.getItem('reminderapp::access_token');\r\n            const { status, data: { status: api_status, data } } = await API.post(`/change-username`, {\r\n                username\r\n            }, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${accessToken}`\r\n                }\r\n            });\r\n\r\n            if(status === 201){\r\n                this.setState({                    \r\n                    msg: 'Username has been updated.'\r\n                });\r\n            }\r\n        }catch(error){\r\n            const { response } = error;\r\n            let errorMsg = error.message;\r\n            if(response){\r\n                const { status, data } = response;\r\n                errorMsg = data.msg;\r\n                if(status === 422){\r\n                    errorMsg = data.data[0].msg\r\n                }\r\n            }\r\n            \r\n            this.setState({                    \r\n                msg: errorMsg\r\n            });\r\n        }\r\n    }\r\n\r\n    closeAlert = () => {\r\n        this.setState({                    \r\n            msg: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const { username } = this.state;\r\n\r\n        if(_.isEmpty(user)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    this.state.msg !== '' ? \r\n                    <Alert key={1} variant='info' onClose={() => this.closeAlert()} dismissible>\r\n                        <strong>Alert! </strong>{this.state.msg}\r\n                    </Alert>\r\n                    : ''\r\n                }\r\n                <div className=\"row mt-5 br1\">\r\n                    <div className=\"col-md\">\r\n                    <Form >\r\n                        <Card className='mx-auto w-50'>\r\n                            <Card.Header>Username</Card.Header>\r\n                            <Card.Body>                            \r\n                                <Form.Group controlId=\"display_name\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control \r\n                                        name=\"username\"\r\n                                        type=\"text\" \r\n                                        placeholder=\"Enter username\" \r\n                                        value={username}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Card.Body>\r\n\r\n                            <Card.Footer>\r\n                            <Button variant=\"outline-dark\" onClick={this.saveProfile}>\r\n                                    Change Username\r\n                            </Button>\r\n                            </Card.Footer>\r\n\r\n                        </Card>\r\n                    </Form>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.auth.user\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        meProfile: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangeUsername);\r\n\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { connect } from 'react-redux';\r\nimport Pagination from \"react-js-pagination\";\r\n\r\nimport { isAccessToken, BASE_URL } from '../../utils/utils';\r\nimport { actionAuthorize } from '../../redux/actions/auth.action';\r\nimport { actionExpiredReminders } from '../../redux/actions/reminders.action';\r\nimport { actionMe } from '../../redux/actions/users.action';\r\n\r\n// Components\r\nimport ReminderCard from './reminder-card.component';\r\n\r\nclass ExpiredReminders extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n       \r\n        this.state = {\r\n            reminders_meta: {\r\n                current_page: 1,\r\n                has_next: null,\r\n                items_count: 0,\r\n                pages_count: 0\r\n            },\r\n            apiMsg: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { history, authorize, loadReminders, meProfile } = this.props;\r\n        \r\n        // Is access_token exists\r\n        if(!isAccessToken() || !await authorize()){\r\n            \r\n            return history.push(`${BASE_URL}login`);\r\n        }\r\n\r\n        // load self profile\r\n        await meProfile();\r\n\r\n        // load reminders\r\n        const res = await loadReminders(this.state.reminders_meta.current_page);\r\n        if(res.status === true){\r\n            \r\n            this.setState({\r\n                reminders_meta: res.meta\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    changeReminderPage = async page => { \r\n        const { loadReminders } = this.props;       \r\n        // load reminders\r\n        const res = await loadReminders(page);\r\n\r\n        if(res.status === true){\r\n            this.setState({\r\n                reminders_meta: res.meta\r\n            });\r\n        }\r\n        if(res.api_status === 404){\r\n            this.setState({\r\n                apiMsg: res.msg\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { reminders, user: { timezone } } = this.props;\r\n        const { apiMsg, reminders_meta: { current_page, items_count } } = this.state;\r\n        \r\n        if(apiMsg !== '') return (<h3 className=\"text-center lead mt-4\">{apiMsg}</h3>);\r\n\r\n        if(_.isEmpty(reminders)) return (<p className=\"mt-4 text-center\"><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>\r\n        <span className=\"sr-only\">Loading...</span></p>);\r\n        \r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    reminders.map( reminder => {\r\n                        return <ReminderCard \r\n                        key={reminder._id} \r\n                        timezone={timezone}\r\n                        {...reminder}\r\n\r\n                        />\r\n                    })\r\n                }\r\n                <Pagination\r\n                    activePage={current_page}\r\n                    itemsCountPerPage={10}\r\n                    totalItemsCount={items_count}\r\n                    pageRangeDisplayed={7}\r\n                    onChange={this.changeReminderPage}\r\n                    itemClass=\"page-item\"\r\n                    innerClass=\"pagination mt-5 mb-5\"\r\n                    linkClass=\"page-link\"\r\n                />\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    reminders: state.reminders.list,\r\n    user: state.auth.user\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        authorize: () => dispatch(actionAuthorize()),\r\n        loadReminders: page => dispatch(actionExpiredReminders(page)),\r\n        meProfile: () => dispatch(actionMe())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpiredReminders);","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n/** Import Components */\nimport HeaderMenu from './components/header/menu.component';\nimport NotFound from './components/not-found/not-found.component';\nimport Login from './components/login/login.component';\nimport Logout from './components/login/logout.component';\nimport Profile from './components/profile/profile.component';\nimport UserProfile from './components/profile/user-profile.component';\nimport HomePage from './components/home/home-page.component';\nimport SetReminder from './components/reminders/set-reminder.component';\nimport UserSearch from './components/search/users-search.component';\nimport FriendRequests from './components/frends/requests.components';\nimport UpdateProfile from './components/profile/update-profile.component';\nimport ChangeUsername from './components/profile/change-username.component';\nimport ExpiredReminders from './components/reminders/expired-reminders.component';\nimport { BASE_URL } from './utils/utils'\n\nclass App extends React.Component {  \n  render(){\n    return (\n      <Provider store={store}>\n        <Router>\n          <HeaderMenu />          \n          <Switch>\n            <Route exact path={`${BASE_URL}`} component={HomePage} />\n            <Route exact path={`${BASE_URL}past-reminders`} component={ExpiredReminders} />\n            <Route path={`${BASE_URL}login`} component={Login} />\n            <Route exact path={`${BASE_URL}me/change-username`} component={ChangeUsername} />\n            <Route exact path={`${BASE_URL}me/edit`} component={UpdateProfile} />\n            <Route path={`${BASE_URL}me`} component={Profile} />\n            <Route exact path={`${BASE_URL}users/:username`} component={UserProfile} />\n            <Route path={`${BASE_URL}logout`} component={Logout} />\n            <Route path={`${BASE_URL}set-reminder`} component={SetReminder} />\n            <Route exact path={`${BASE_URL}search/:q`} component={UserSearch} />\n            <Route path={`${BASE_URL}requests`} component={FriendRequests} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </Router>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}